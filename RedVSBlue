#include <Adafruit_NeoPixel.h>

// Define the buttons and pin location
#define BUTTON_PIN_2   4  // Cycle/Random
#define BUTTON_PIN_3   2  // Red
#define BUTTON_PIN_4   1  // Green




#define PIXEL_PIN    7    // Digital IO pin connected to the NeoPixels.
#define PIXEL_PIN2    12    // Digital IO pin connected to the NeoPixels.

#define PIXEL_COUNT 60    // Number of LEDs in the Neopixel

// Parameter 1 = number of pixels in strip,  neopixel stick has 8
// Parameter 2 = pin number (most are valid)
// Parameter 3 = pixel type flags, add together as needed:
//   NEO_RGB     Pixels are wired for RGB bitstream
//   NEO_GRB     Pixels are wired for GRB bitstream, correct for neopixel stick
//   NEO_KHZ400  400 KHz bitstream (e.g. FLORA pixels)
//   NEO_KHZ800  800 KHz bitstream (e.g. High Density LED strip), correct for neopixel stick
Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, NEO_GRBW + NEO_KHZ800);
Adafruit_NeoPixel strip2 = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN2, NEO_GRBW + NEO_KHZ800);

// State variables and initial condition
bool oldState_2 = HIGH;
bool oldState_3 = HIGH;
bool oldState_4 = HIGH;

int showType = 0;
int colorSpeed = 40; // Delay in pixel color wipe
int rainbowSpeed = .8; // Delay in rainbow wipe
int theaterSpeed = 100; // Delay in theater chase


void setup() {
  pinMode(BUTTON_PIN_2, INPUT_PULLUP);
  pinMode(BUTTON_PIN_3, INPUT_PULLUP);
  pinMode(BUTTON_PIN_4, INPUT_PULLUP);

  strip.begin();
  strip2.begin();
  strip.show(); // Initialize all pixels to 'off'
  strip2.show(); // Initialize all pixels to 'off'
}

void loop() {
  // Get current button state.
  bool newState_2 = digitalRead(BUTTON_PIN_2);
  bool newState_3 = digitalRead(BUTTON_PIN_3);
  bool newState_4 = digitalRead(BUTTON_PIN_4);

  
  // Check if button 2 state changed from high to low (button press).
  if (newState_2 == LOW && oldState_2 == HIGH) {
    // Short delay to debounce button.
    delay(20);
    // Check if button is still low after debounce.
    newState_2 = digitalRead(BUTTON_PIN_2);
    if (newState_2 == LOW) {
      colorWipe(strip.Color(0, 0, 255), colorSpeed); // Green
      colorWipe(strip2.Color(0, 0, 255), colorSpeed); // Green
    }
    }
  
  // Check if button 3 state changed from high to low (button press).   
    else if (newState_3 == LOW && oldState_3 == HIGH) {
    // Short delay to debounce button.
    delay(20);
    // Check if button is still low after debounce.
    newState_3 = digitalRead(BUTTON_PIN_3);
    if (newState_3 == LOW) {
      colorWipe(strip.Color(255, 0, 0), colorSpeed);  // Red
      colorWipe(strip2.Color(255, 0, 0), colorSpeed);  // Red
    }
    }

   // Check if button 4 state changed from high to low (button press).    
    else if (newState_4 == LOW && oldState_4 == HIGH) {
    // Short delay to debounce button.
    delay(20);
    // Check if button is still low after debounce.
    newState_4 = digitalRead(BUTTON_PIN_4);
    if (newState_4 == LOW) {
      showType++;
      if (showType > 3)
        showType=0;
      startShow(showType);
    }
    }
    

  // Set the last button state to the old state.
  oldState_2 = newState_2;
  oldState_3 = newState_3;
  oldState_3 = newState_4;

}


//Cycle
void startShow(int i) {
  switch(i){
  
    case 0: theaterChase(strip.Color(127, 127, 127), theaterSpeed); // White
            theaterChase(strip2.Color(127, 127, 127), theaterSpeed); // White
            break;
    case 1: theaterChase(strip.Color(127,   0,   0), theaterSpeed); // Red
            theaterChase(strip2.Color(127,   0,   0), theaterSpeed); // Red
            break;
    case 2: theaterChase(strip.Color(  0,   0, 127), theaterSpeed); // Blue
            theaterChase(strip2.Color(  0,   0, 127), theaterSpeed); // Blue
            break;
    case 3: theaterChase(strip.Color(  0,   127, 0), theaterSpeed); // Green
            theaterChase(strip2.Color(  0,   127, 0), theaterSpeed); // Green
            break;
  
  }
}

// Fill strip pixels one after another with a color. Strip is NOT cleared
// first; anything there will be covered pixel by pixel. Pass in color
// (as a single 'packed' 32-bit value, which you can get by calling
// strip.Color(red, green, blue) as shown in the loop() function above),
// and a delay time (in milliseconds) between pixels.
void colorWipe(uint32_t color, int wait) {
  for(int i=0; i<strip.numPixels(); i++) { // For each pixel in strip...
    strip.setPixelColor(i, color);         //  Set pixel's color (in RAM)
    strip2.setPixelColor(i, color);         //  Set pixel's color (in RAM)
    strip.show();                          //  Update strip to match
    strip2.show();                          //  Update strip to match
    delay(wait);                           //  Pause for a moment
  }
}

// Theater-marquee-style chasing lights. Pass in a color (32-bit value,
// a la strip.Color(r,g,b) as mentioned above), and a delay time (in ms)
// between frames.
void theaterChase(uint32_t color, int wait) {
  for(int a=0; a<10; a++) {  // Repeat 10 times...
    for(int b=0; b<3; b++) { //  'b' counts from 0 to 2...
      strip.clear();         //   Set all pixels in RAM to 0 (off)
      strip2.clear();         //   Set all pixels in RAM to 0 (off)
      // 'c' counts up from 'b' to end of strip in steps of 3...
      for(int c=b; c<strip.numPixels(); c += 3) {
        strip.setPixelColor(c, color); // Set pixel 'c' to value 'color'
        strip2.setPixelColor(c, color); // Set pixel 'c' to value 'color'
      }
      strip.show(); // Update strip with new contents
      strip2.show(); // Update strip with new contents
      delay(wait);  // Pause for a moment
    }
  }
}

// Rainbow cycle along whole strip. Pass delay time (in ms) between frames.
void rainbow(int wait) {
  // Hue of first pixel runs 3 complete loops through the color wheel.
  // Color wheel has a range of 65536 but it's OK if we roll over, so
  // just count from 0 to 3*65536. Adding 256 to firstPixelHue each time
  // means we'll make 3*65536/256 = 768 passes through this outer loop:
  for(long firstPixelHue = 0; firstPixelHue < 3*65536; firstPixelHue += 256) {
    for(int i=0; i<strip.numPixels(); i++) { // For each pixel in strip...
      // Offset pixel hue by an amount to make one full revolution of the
      // color wheel (range of 65536) along the length of the strip
      // (strip.numPixels() steps):
      int pixelHue = firstPixelHue + (i * 65536L / strip.numPixels());
      // strip.ColorHSV() can take 1 or 3 arguments: a hue (0 to 65535) or
      // optionally add saturation and value (brightness) (each 0 to 255).
      // Here we're using just the single-argument hue variant. The result
      // is passed through strip.gamma32() to provide 'truer' colors
      // before assigning to each pixel:
      strip.setPixelColor(i, strip.gamma32(strip.ColorHSV(pixelHue)));
      strip2.setPixelColor(i, strip2.gamma32(strip2.ColorHSV(pixelHue)));
    }
    strip.show(); // Update strip with new contents
    strip2.show(); // Update strip with new contents
    delay(wait);  // Pause for a moment
  }
}

// Rainbow-enhanced theater marquee. Pass delay time (in ms) between frames.
void theaterChaseRainbow(int wait) {
  int firstPixelHue = 0;     // First pixel starts at red (hue 0)
  for(int a=0; a<30; a++) {  // Repeat 30 times...
    for(int b=0; b<3; b++) { //  'b' counts from 0 to 2...
      strip.clear();         //   Set all pixels in RAM to 0 (off)
      // 'c' counts up from 'b' to end of strip in increments of 3...
      for(int c=b; c<strip.numPixels(); c += 3) {
        // hue of pixel 'c' is offset by an amount to make one full
        // revolution of the color wheel (range 65536) along the length
        // of the strip (strip.numPixels() steps):
        int      hue   = firstPixelHue + c * 65536L / strip.numPixels();
        uint32_t color = strip.gamma32(strip.ColorHSV(hue)); // hue -> RGB
        strip.setPixelColor(c, color); // Set pixel 'c' to value 'color'
        strip2.setPixelColor(c, color); // Set pixel 'c' to value 'color'
      }
      strip.show();                // Update strip with new contents
      strip2.show();                // Update strip with new contents
      delay(wait);                 // Pause for a moment
      firstPixelHue += 65536 / 90; // One cycle of color wheel over 90 frames
    }
  }
}
